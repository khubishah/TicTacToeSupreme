{"ast":null,"code":"import _slicedToArray from \"/Users/Khubi/Documents/my-first-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Khubi/Documents/my-first-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/** FUTURE VERSION WILL HAVE:\n * Display the location for each move in the format (col, row) in the move history list.\nBold the currently selected item in the move list.\nRewrite Board to use two loops to make the squares instead of hardcoding them.\nAdd a toggle button that lets you sort the moves in either ascending or descending order.\nWhen someone wins, highlight the three squares that caused the win.\nWhen no one wins, display a message about the result being a draw.\n */\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }); // passing a prop called value to square\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, this.renderSquare(0), this.renderSquare(1), this.renderSquare(2)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.renderSquare(3), this.renderSquare(4), this.renderSquare(5)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.renderSquare(6), this.renderSquare(7), this.renderSquare(8)));\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        moveRow: 0,\n        moveColumn: 0,\n        squares: Array(9).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    let row = current.moveRow;\n    let col = current.moveColumn;\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    row = i / 3 + 1;\n    co;\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares); // 0 if no one won, 1 is someone won, 2 is draw\n\n    const moves = history.map((step, move) => {\n      const desc = move ? 'Go to move #' + move : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"move\",\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner) {\n      status = winner + ' has won!';\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Tic Tac Toe Supreme\"), React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      className: \"moves\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, moves)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n\n  return null;\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 175\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/Khubi/Documents/my-first-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","squares","render","Game","constructor","state","history","moveRow","moveColumn","Array","fill","stepNumber","xIsNext","jumpTo","step","setState","handleClick","slice","current","length","row","col","calculateWinner","co","concat","winner","moves","map","move","desc","status","lines","a","b","c","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/** FUTURE VERSION WILL HAVE:\n * Display the location for each move in the format (col, row) in the move history list.\nBold the currently selected item in the move list.\nRewrite Board to use two loops to make the squares instead of hardcoding them.\nAdd a toggle button that lets you sort the moves in either ascending or descending order.\nWhen someone wins, highlight the three squares that caused the win.\nWhen no one wins, display a message about the result being a draw.\n */\n\nfunction Square(props) {\n\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\n   \n  \n  \n  class Board extends React.Component {\n\n    renderSquare(i) {\n      return (\n            <Square \n                    value={this.props.squares[i]}\n                    onClick={() => this.props.onClick(i)} \n      />);\n      // passing a prop called value to square\n    }\n  \n    render() {\n       \n      return (\n        <div>\n          <div className=\"board-row\">\n            {this.renderSquare(0)}\n            {this.renderSquare(1)}\n            {this.renderSquare(2)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(3)}\n            {this.renderSquare(4)}\n            {this.renderSquare(5)}\n          </div>\n          <div className=\"board-row\">\n            {this.renderSquare(6)}\n            {this.renderSquare(7)}\n            {this.renderSquare(8)}\n          </div>\n        </div>\n      );\n    }\n  }\n  \n  class Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\n            history: [\n\n            {\n                moveRow: 0,\n                moveColumn: 0,\n                squares: Array(9).fill(null),\n            }\n        ],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        let row = current.moveRow;\n        let col = current.moveColumn;\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        row = (i / 3) + 1;\n        co\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        // 0 if no one won, 1 is someone won, 2 is draw\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n            'Go to move #' + move : \n            'Go to game start';\n            return (\n                <li key={move}>\n                    <button className=\"move\" onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = winner + ' has won!';\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n      return (\n        <div className=\"game\">\n          <h1>Tic Tac Toe Supreme</h1>\n          <div className=\"game-board\">\n            <Board \n                squares={current.squares}\n                onClick={(i) => this.handleClick(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div className=\"status\">{status}</div>\n            <ol className=\"moves\">{moves}</ol>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  function calculateWinner(squares) {\n      const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6,7,8],\n          [0,3,6],\n          [1,4,7],\n          [2,5,8],\n          [0,4,8],\n          [2,4,6],\n      ];\n      \n      for (let i = 0; i < lines.length; i++) {\n          const [a,b,c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n              return squares[a];\n          }\n      }\n  \n      return null;\n  }\n\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  \n  "]},"metadata":{},"sourceType":"module"}