{"ast":null,"code":"import _slicedToArray from \"/Users/Khubi/Documents/my-first-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/Khubi/Documents/my-first-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/** FUTURE VERSION WILL HAVE:\n * \nAdd a toggle button that lets you sort the moves in either ascending or descending order.\nWhen someone wins, highlight the three squares that caused the win.\nWhen no one wins, display a message about the result being a draw.\n */\n\nfunction Square(props) {\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    let winner = false;\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    let ind;\n    let winningLine = lines[this.props.winningSquares];\n\n    for (let i = 0; i < winningLine.length; i++) {\n      if (winningLine[i] === i) winner = true;\n    }\n\n    return React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      winningSquare: winner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }); // passing a prop called value to square\n  }\n\n  renderRow(i) {\n    const arr = [0, 1, 2];\n    const row = arr.map((val, j) => {\n      return this.renderSquare(i * 3 + j);\n    });\n    return row;\n  }\n\n  render() {\n    const arr = [0, 1, 2];\n    const board = arr.map((val, i) => {\n      return React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.renderRow(i));\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, board);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        moveRow: 0,\n        moveColumn: 0,\n        squares: Array(9).fill(null)\n      }],\n      clickedMove: -1,\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n      clickedMove: step\n    });\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    const row = parseInt(i / 3) + 1;\n    const col = i % 3 + 1;\n    this.setState({\n      history: history.concat([{\n        moveRow: row,\n        moveColumn: col,\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const clickedMove = this.state.clickedMove;\n    let winningSquares = -1; // 0 if no one won, 1 is someone won, 2 is draw\n\n    const moves = history.map((step, move) => {\n      const desc = move ? `Go back to move # ${move} made at (row,col) = (${history[move].moveRow}, ${history[move].moveColumn})` : 'Go to game start';\n      let className = \"move\";\n\n      if (move === clickedMove) {\n        className = \"move_curr\";\n      }\n\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: className,\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, desc));\n    });\n    let status;\n\n    if (winner[0]) {\n      status = winner + ' has won!';\n      winningSquares = winner[1];\n    } else {\n      const draw = checkDraw(current.squares);\n\n      if (!draw) {\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n      } else {\n        status = 'Draw Game!';\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Tic Tac Toe Supreme\"), React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      winningSquares: winningSquares,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, status), React.createElement(\"ol\", {\n      className: \"moves\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, moves)));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return [squares[a], i];\n    }\n  }\n\n  return [null, -1];\n}\n\nfunction checkDraw(squares) {\n  let draw = true;\n\n  for (let i = 0; i < squares.length; i++) {\n    if (squares[i] === null) {\n      draw = false;\n    }\n  }\n\n  return draw;\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 231\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/Users/Khubi/Documents/my-first-app/src/index.js"],"names":["React","ReactDOM","Square","props","onClick","value","Board","Component","renderSquare","i","winner","lines","ind","winningLine","winningSquares","length","squares","renderRow","arr","row","map","val","j","render","board","Game","constructor","state","history","moveRow","moveColumn","Array","fill","clickedMove","stepNumber","xIsNext","jumpTo","step","setState","handleClick","slice","current","calculateWinner","parseInt","col","concat","moves","move","desc","className","status","draw","checkDraw","a","b","c","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n/** FUTURE VERSION WILL HAVE:\n * \nAdd a toggle button that lets you sort the moves in either ascending or descending order.\nWhen someone wins, highlight the three squares that caused the win.\nWhen no one wins, display a message about the result being a draw.\n */\n\nfunction Square(props) {\n    \n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\n   \n  \n  \n  class Board extends React.Component {\n\n    renderSquare(i) {\n      let winner = false;\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6,7,8],\n        [0,3,6],\n        [1,4,7],\n        [2,5,8],\n        [0,4,8],\n        [2,4,6],\n      ];\n      let ind\n      let winningLine  = lines[this.props.winningSquares];\n      for (let i = 0; i < winningLine.length; i++) {\n        if (winningLine[i] === i) winner = true;\n      }\n\n      return (\n            <Square \n                    value={this.props.squares[i]}\n                    onClick={() => this.props.onClick(i)} \n                    winningSquare = {winner}\n      />);\n      // passing a prop called value to square\n    }\n\n    renderRow(i) {  \n      const arr = [0,1,2];\n      const row = arr.map((val,j) => {\n        return (\n          this.renderSquare(i * 3 + j)\n        );\n      });\n\n      return row;\n    }\n\n  \n  \n    render() {\n      const arr = [0,1,2];\n      const board = arr.map((val, i) => {\n        return (\n          <div className=\"board-row\">\n              {this.renderRow(i)}\n            </div>\n        );\n      });\n      \n      return (\n        <div>\n          {board}\n        </div>\n      );\n    }\n\n  \n  }\n  \n  class Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n\n            {\n                moveRow: 0,\n                moveColumn: 0,\n                squares: Array(9).fill(null),\n            }\n        ],\n            clickedMove: -1,\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n            clickedMove: step\n        });\n      \n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        const row = parseInt(i / 3) + 1;\n        const col = (i % 3) + 1;\n        this.setState({\n            history: history.concat([{\n                moveRow: row,\n                moveColumn: col,\n                squares: squares,\n\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const clickedMove = this.state.clickedMove;\n        let winningSquares = -1;\n        // 0 if no one won, 1 is someone won, 2 is draw\n\n        const moves = history.map((step, move) => {\n            const desc = move ?\n            `Go back to move # ${move} made at (row,col) = (${history[move].moveRow}, ${history[move].moveColumn})` : \n            'Go to game start';\n            let className = \"move\";\n            if (move === clickedMove) {\n              className = \"move_curr\";\n            }\n            return (\n                <li key={move}>\n                    <button className={className} onClick={() => this.jumpTo(move)}>{desc}</button>\n                </li>\n            );\n            \n            \n        });\n\n        let status;\n        if (winner[0]) {\n            status = winner + ' has won!';\n            winningSquares = winner[1];\n        } else {\n            const draw = checkDraw(current.squares);\n            if (!draw) {\n              status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n            }\n            else {\n              status = 'Draw Game!';\n            }\n            \n        }\n      return (\n        <div className=\"game\">\n          <h1>Tic Tac Toe Supreme</h1>\n          <div className=\"game-board\">\n            <Board \n                squares={current.squares}\n                onClick={(i) => this.handleClick(i)}\n                winningSquares={winningSquares}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div className=\"status\">{status}</div>\n            <ol className=\"moves\">{moves}</ol>\n            \n          </div>\n        </div>\n      );\n    }\n  }\n\n  function calculateWinner(squares) {\n      const lines = [\n          [0, 1, 2],\n          [3, 4, 5],\n          [6,7,8],\n          [0,3,6],\n          [1,4,7],\n          [2,5,8],\n          [0,4,8],\n          [2,4,6],\n      ];\n      \n      for (let i = 0; i < lines.length; i++) {\n          const [a,b,c] = lines[i];\n          if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n              return [squares[a], i];\n          }\n      }\n  \n      return [null, -1];\n  }\n\n  function checkDraw(squares) {\n    let draw = true;\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] === null) {\n        draw = false;\n      }\n    }\n    return draw;\n  }\n\n  \n  // ========================================\n  \n  ReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n  );\n  \n  "]},"metadata":{},"sourceType":"module"}